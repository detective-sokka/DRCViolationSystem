@startuml
' Interfaces
interface Observer {
    +update()
}

interface Subject {
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

' Core domain classes
abstract DBObject {
    -id: string    
    -observers: Set<Observer>   
    --
    +getId() : string
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

class DRCViolation {    
    -stale : bool
    -violationId: string
    -involvedObjects : pair<DBObject*, DBObject*>
    --
    +update()
    +isStale() : bool
    +getInvolvedObjects(): pair<DBObject*, DBObject*>    
}

class DRCEngine {
    -dbObjects: unordered_map<string, shared_ptr<DBObject>> objects;
    -<u>instance : DRCEngine</u>
    --
    +createViolation(obj1: DBObject, obj2 : DBObject)
    +updateViolations(obj: DBObject)
    +removeViolations(obj: DBObject)
    +getInstance() : DRCEngine    
}

DBObject ..|> Subject
DRCViolation ..|> Observer
DRCViolation "1..*" --o "1..2" DBObject : observes

' Composition and Singleton
DRCEngine *-- DRCViolation
DRCEngine o-- DBObject

note right of DRCEngine
  Singleton pattern:
  - getInstance() returns the only instance
  - instance is static (underlined)
end note
@enduml