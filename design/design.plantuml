@startuml
' Interfaces
interface Observer {
    +update()
}

interface Subject {
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

' Core domain classes
class DBObject {
    -id: string    
    -observers: Set<Observer>   
    --
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

class DRCViolation {    
    -violationId: string
    -involvedObjectIds : pair<string, string>
    --
    +update()
    +getInvolvedObjectIds(): pair<string, string>
}

class DRCEngine {
    -objectViolations: Set<DBObject>
    -<u>instance : DRCEngine</u>
    --
    +addViolation(violation: DRCViolation)
    +removeViolationsForObject(obj: DBObject)
    +updateViolation(obj: DBObject)
    +getInstance() : DRCEngine    
}

DBObject ..|> Subject
DRCViolation ..|> Observer
DRCViolation "1..*" --o "1..2" DBObject : observes

' Composition and Singleton
DRCEngine *-- DRCViolation
note right of DRCEngine
  Singleton pattern:
  - getInstance() returns the only instance
  - instance is static (underlined)
end note
@enduml