@startuml
' Interfaces
interface Observer {
    +update(DBObject obj)
}

interface Subject {
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

' Core domain classes
class DBObject {
    +id: string
    +geometry: Geometry
    --
    +subscribe(observer: Observer)
    +unsubscribe(observer: Observer)
    +notifyObservers()
}

class DRCViolation {
    +violationId: string
    +update(DBObject obj)
    +getInvolvedObjects(): List<DBObject>
}

class DRCViolationSystem {
    +addViolation(violation: DRCViolation)
    +removeViolationsForObject(obj: DBObject)
    +updateViolation(obj: DBObject)
    +getInstance() : DRCViolationSystem
    --
    -objectToViolations: Map<DBObject, Set<DRCViolation>>
    -<u>instance : DRCViolationSystem</u>
}

DBObject ..|> Subject
DRCViolation ..|> Observer
DRCViolation --> "1..*" DBObject : observes

' Composition and Singleton
DRCViolationSystem *-- "1..*" DRCViolation
note right of DRCViolationSystem
  Singleton pattern:
  - getInstance() returns the only instance
  - instance is static (underlined)
end note
@enduml